#include <iostream>
#include <string>
using namespace std;

// Clasa Aliment
class Aliment {
public:
    string nume;
    int caloriiPerPortie;
    char* origine;
    static int numarTotalAlimente;
    const int gramajPortie;

    // Constructor implicit
    Aliment() : gramajPortie(100) {
        this->nume = "Mere";
        this->caloriiPerPortie = 52;
        this->origine = new char[strlen("Romania") + 1];
        strcpy_s(this->origine, strlen("Romania") + 1, "Romania");
        numarTotalAlimente++;
    }

    // Constructor cu parametri
    Aliment(string nume, int calorii, const char* origine) : gramajPortie(100) {
        this->nume = nume;
        this->caloriiPerPortie = calorii;
        this->origine = new char[strlen(origine) + 1];
        strcpy_s(this->origine, strlen(origine) + 1, origine);
        numarTotalAlimente++;
    }

    // Destructor
    ~Aliment() {
        if (this->origine != NULL) {
            delete[] this->origine;
        }
    }

    void afisare() {
        cout << "Nume: " << this->nume << endl;
        cout << "Calorii per portie: " << this->caloriiPerPortie << " kcal" << endl;
        cout << "Origine: " << this->origine << endl;
        cout << "Gramaj portie: " << this->gramajPortie << " g" << endl;
        cout << "Numar total alimente: " << numarTotalAlimente << endl;
    }
};
int Aliment::numarTotalAlimente = 0;

// Clasa Dieta
class Dieta {
public:
    string tipDieta;
    float durataZile;
    char* scop;
    static int numarTotalDiete;
    const float cantitateProteineZilnic;

    // Constructor implicit
    Dieta() : cantitateProteineZilnic(50.0f) {
        this->tipDieta = "Vegetariana";
        this->durataZile = 30;
        this->scop = new char[strlen("Detoxifiere") + 1];
        strcpy_s(this->scop, strlen("Detoxifiere") + 1, "Detoxifiere");
        numarTotalDiete++;
    }

    // Constructor cu parametri
    Dieta(string tip, float durata, const char* scop) : cantitateProteineZilnic(50.0f) {
        this->tipDieta = tip;
        this->durataZile = durata;
        this->scop = new char[strlen(scop) + 1];
        strcpy_s(this->scop, strlen(scop) + 1, scop);
        numarTotalDiete++;
    }

    // Destructor
    ~Dieta() {
        if (this->scop != NULL) {
            delete[] this->scop;
        }
    }

    void afisare() {
        cout << "Tip dieta: " << this->tipDieta << endl;
        cout << "Durata in zile: " << this->durataZile << " zile" << endl;
        cout << "Scop: " << this->scop << endl;
        cout << "Cantitate proteine zilnic: " << this->cantitateProteineZilnic << " g" << endl;
        cout << "Numar total diete: " << numarTotalDiete << endl;
    }
};
int Dieta::numarTotalDiete = 0;

// Clasa AportCaloric
class AportCaloric {
public:
    int caloriiZilnice;
    float greutateAliment;
    char* sursaAport;
    static int numarTotalAporturi;
    const float necesarCaloricZilnic;

    // Constructor implicit
    AportCaloric() : necesarCaloricZilnic(2000.0f) {
        this->caloriiZilnice = 1800;
        this->greutateAliment = 150;
        this->sursaAport = new char[strlen("Legume") + 1];
        strcpy_s(this->sursaAport, strlen("Legume") + 1, "Legume");
        numarTotalAporturi++;
    }

    // Constructor cu parametri
    AportCaloric(int calorii, float greutate, const char* sursa) : necesarCaloricZilnic(2000.0f) {
        this->caloriiZilnice = calorii;
        this->greutateAliment = greutate;
        this->sursaAport = new char[strlen(sursa) + 1];
        strcpy_s(this->sursaAport, strlen(sursa) + 1, sursa);
        numarTotalAporturi++;
    }

    // Destructor
    ~AportCaloric() {
        if (this->sursaAport != NULL) {
            delete[] this->sursaAport;
        }
    }

    void afisare() {
        cout << "Calorii zilnice: " << this->caloriiZilnice << " kcal" << endl;
        cout << "Greutate aliment: " << this->greutateAliment << " g" << endl;
        cout << "Sursa aport: " << this->sursaAport << endl;
        cout << "Necesar caloric zilnic: " << this->necesarCaloricZilnic << " kcal" << endl;
        cout << "Numar total aporturi calorice: " << numarTotalAporturi << endl;
    }
};
int AportCaloric::numarTotalAporturi = 0;

// Functia main
void main() {
    // Obiecte Aliment
    Aliment aliment1;
    aliment1.afisare();

    Aliment aliment2("Portocale", 47, "Spania");
    aliment2.afisare();

    // Obiecte Dieta
    Dieta dieta1;
    dieta1.afisare();

    Dieta dieta2("Keto", 60, "Slabire");
    dieta2.afisare();

    // Obiecte AportCaloric
    AportCaloric aport1;
    aport1.afisare();

    AportCaloric aport2(2200, 250, "Carne");
    aport2.afisare();}
